#!/usr/bin/env node
var env = process.env.NODE_ENV || 'development';
var config = require('../config/config')[env];
var app = require('../app');
var pkg = require('../package');
var debug = require('debug')('beanstack');
var http = require('http');
var util = require('util');
var logger = require('../config/logger');

var onError = function (error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = (typeof port === 'string') ? 'Pipe ' + port : 'Port ' + port;

    switch (error.code) {
        case 'EACCES':
            logger.info('EACCES: ' + bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.info('EADDRINUSE: ' + bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
};

var onListening = function () {
    var addr = server.address();
    //var bind = (typeof addr === 'string') ? 'pipe ' + addr : 'port ' + addr.port;
    var bindValue = (typeof addr === 'string') ?  addr : addr.port;
    var message = util.format('Atigeo BeanStack %s server running at %s:%s.',
        env, config.serverUri, bindValue);

    debug(message);
    logger.info(message);
};

var normalizePort = function (val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
};

var port = normalizePort(process.env.PORT || config.serverPort || '3000');
var server = http.createServer(app);

app.set('port', port);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
